<!-- Copyright (C) The IETF Trust (2012) -->
<!-- Copyright (C) The Internet Society (2012) -->

<section anchor='sec:examples' title='Use Cases'>
  <t>
    MAC labeling is meant to allow NFSv4.2 to be deployed in site
    configurable security schemes. The LFS and opaque data scheme
    allows for flexibility to meet these different implementations.
    In this section, we provide some examples of how NFSv4.2
    could be deployed to meet existing needs. This is not an
    exhaustive listing.
  </t>

  <section anchor='ss:examples:full' title='Full MAC labeling support for remotely mounted filesystems'>
    <t>
      In this case, we assume a local networked environment where the
      servers and clients are under common administrative control.  All
      systems in this network have the same MAC implementation and
      semantically identical MAC security labels for objects (i.e. labels
      mean the same thing on different systems, even if the policies on
      each system may differ to some extent).  Clients will be able to
      apply fine-grained MAC policy to objects accessed via NFS mounts, and
      thus improve the overall consistency of MAC policy application within
      this environment.
    </t>

    <t>
      An example of this case would be where user home directories are
      remotely mounted, and fine-grained MAC policy is implemented to
      protect, for example, private user data from being read by malicious
      web scripts running in the user's browser.  With Labeled NFS,
      fine-grained MAC labeling of the user's files will allow the local MAC
      policy to be implemented and provide the desired protection.
    </t>
  </section>

  <section anchor='ss:examples:vms' title='MAC labeling of virtual machine images stored on the network'>
    <t>
      Virtualization is now a commonly implemented feature of modern
      operating systems, and there is a need to ensure that MAC security
      policy is able to to protect virtualized resources.  A common
      implementation scheme involves storing virtualized guest filesystems
      on a networked server, which are then mounted remotely by guests upon
      instantiation.  In this case, there is a need to ensure that the
      local guest kernel is able to access fine-grained MAC labels on the
      remotely mounted filesystem so that its MAC security policy can be
      applied.
    </t>
  </section>

  <section anchor='ss:examples:itar' title='International Traffic in Arms Regulations (ITAR)'>
    <t>
      The International Traffic in Arms Regulations (ITAR) is put
      forth by the United States Department of State, Directorate
      of Defense and Trade Controls.  ITAR places strict requirements
      on the export and thus access of defense articles and defense
      services.  Organizations that manage projects with articles
      and services deemed as within the scope of ITAR must ensure
      the regulations are met.  The regulations require an assurance
      that ITAR information is accessed on a need-to-know basis,
      thus requiring strict, centrally managed access controls on
      items labeled as ITAR.  Additionally, organizations must be
      able to prove that the controls were adequately maintained
      and that foreign nationals were not permitted access to these
      defense articles or service.  ITAR control applicability may
      be dynamic; information may become subject to ITAR after
      creation (e.g., when the defense implications of technology
      are recognized).
    </t>
  </section>

  <section anchor='ss:examples:legalhold' title='Legal Hold/eDiscovery'>
    <t>
      Increased cases of legal holds on electronic sources of
      information (ESI) have resulted in organizations taking a
      pro-active approach to reduce the scope and thus costs
      associated with these activities.  ESI Data Maps are increasing
      in use and require support in operating systems to strictly
      manage access controls in the case of a legal hold.  The
      sizeable quantity of information involved in a legal discovery
      request may preclude making a copy of the information to a
      separate system that manages the legal hold on the copies;
      this results in a need to enforce the legal hold on the
      original information.
    </t>

    <t>
      Organizations are taking steps to map out the sources of
      information that are most likely to be placed under a legal
      hold, these efforts result in ESI Data Maps.  ESI Data Maps
      specify the Electronic Source of Information and the requirements
      for sensitivity and criticality.  In the case of a legal hold,
      the ESI data map and labels can be used to ensure the legal
      hold is properly enforced on the predetermined set of
      information.  An ESI data map narrows the scope of a legal
      hold to the predetermined ESI.  The information must then be
      protected at a level of security of which the weight and
      admissibility of that evidence may be proved in a court of
      law.  Current systems use application level controls and do
      not adequately meet the requirements.  Labels may be used in
      advance when an ESI data map exercise is conducted with
      controls being applied at the time of a hold or labels may
      be applied to data sets during an eDiscovery exercise to
      ensure the data protections are adequate during the legal
      hold period.
    </t>

    <t>
      Note that this use case requires multi-attribute labels, as
      both information sensitivity (e.g., to disclosure) and
      information criticality (e.g., to continued business operations)
      need to be captured.
    </t>
  </section>

  <section anchor='ss:examples:simple' title='Simple security label storage'>
    <t>
      In this case, a mixed and loosely administered network is assumed,
      where nodes may be running a variety of operating systems with
      different security mechanisms and security policies.  It is desired
      that network file servers be simply capable of storing and retrieving
      MAC security labels for clients which use such labels.  The Labeled
      NFS protocol would be implemented here solely to enable transport of
      MAC security labels across the network.  It should be noted that in
      such an environment, overall security cannot be as strongly enforced
      as in case (a), and that this scheme is aimed at allowing MAC-capable
      clients to function with local MAC security policy enabled rather
      than perhaps disabling it entirely.
    </t>
  </section>

  <section anchor='ss:examples:diskless' title='Diskless Linux'>
    <t>
      A number of popular operating system distributions depend on
      a mandatory access control (MAC) model to implement a
      kernel-enforced security policy. Typically, such models assign
      particular roles to individual processes, which limit or
      permit performing certain operations on a set of files,
      directories, sockets, or other objects.  While the enforcing
      of the policy is typically a matter for the diskless NFS
      client itself, the filesystem objects in such models will
      typically carry MAC labels that are used to define policy on
      access.  These policies may, for instance, describe privilege
      transitions that cannot be replicated using standard NFS ACL
      based models.
    </t>

    <t>
      For instance on a SYSV compatible system, if the 'init' process
      spawns a process that attempts to start the 'NetworkManager'
      executable, there may be a policy that sets up a role transition
      if the 'init' process and 'NetworkManager' file labels match
      a particular rule. Without this role transition, the process
      may find itself having insufficient privileges to perform its
      primary job of configuring network interfaces.
    </t>

    <t>
      In setups of this type, a lot of the policy targets (such as
      sockets or privileged system calls) are entirely local to the
      client. The use of RPCSEC_GSSv3 for enforcing compliance at
      the server level is therefore of limited value. The ability
      to permanently label files and have those labels read back
      by the client is, however, crucial to the ability to enforce
      that policy.
    </t>
  </section>

  <section anchor='ss:examples:mls' title='Multi-Level Security'>
    <t>
      In a MLS system objects are generally assigned
      a sensitivity level and a set of compartments.  The sensitivity
      levels within the system are given an order ranging from lowest to
      highest classification level.  Read access to an object is allowed
      when the sensitivity level of the subject "dominates" the object it
      wants to access.  This means that the sensitivity level of the
      subject is higher than that of the object it wishes to access and
      that its set of compartments is a super-set of the compartments on
      the object.
    </t>

    <t>
      The rest of the section will just use sensitivity levels.  In general
      the example is a client that wishes to list the contents of a
      directory.  The system defines the sensitivity levels as
      Unclassified (U), Secret (S), and Top Secret (TS).  The directory to be
      searched is labeled Top Secret which means access to read the
      directory will only be granted if the subject making the request is
      also labeled Top Secret.
    </t>

    <section anchor='ss:examples:fm' title='Full Mode - MAC functional Client and Server'>
      <t>
        In the first part of this example a process on the client is running
        at the Secret level.  The process issues a readdir() system call which
        enters the kernel.  Before translating the readdir() system call into a
        request to the NFSv4.2 server the host operating system will consult
        the MAC module to see if the operation is allowed.  Since the process
        is operating at Secret and the directory to be accessed is labeled
        Top Secret the MAC module will deny the request and an error code is
        returned to user space.
      </t>

      <t>
        Consider a second case where instead of running at Secret the process
        is running at Top Secret.  In this case the sensitivity of the
        process is equal to or greater than that of the directory so the MAC
        module will allow the request.  Now the readdir() is translated into
        the necessary NFSv4.2 call to the server.  For the RPC request the
        client is using the proper credential to assert to the server that
        the process is running at Top Secret.
      </t>

      <t>
        When the server receives the request it extracts the security label
        from the RPC session and retrieves the label on the directory.  The
        server then checks with its MAC module if a Top Secret process is
        allowed to read the contents of the Top Secret directory.  Since this
        is allowed by the policy then the server will return the appropriate
        information back to the client.
      </t>

      <t>
        In this example the policy on the client and server were both the
        same.  In the event that they were running different policies a
        translation of the labels might be needed.  In this case it could be
        possible for a check to pass on the client and fail on the server.
        The server may consider additional information when making its policy
        decisions.  For example the server could determine that a certain
        subnet is only cleared for data up to Secret classification.  If that
        constraint was in place for the example above the client would still
        succeed, but the server would fail since the client is asserting a
        label that it is not able to use (Top Secret on a Secret network).
      </t>
    </section>

    <section anchor='ss:examples:pec' title='MAC functional Client'>
      <t>
        With a client that is MAC functional and a server which is not,
        this example is identical to the first part of the previous
        example.  A process on the client labeled Secret wishes to
        access a Top Secret directory.  As in the previous example,
        this is denied since Secret does not dominate Top Secret.  If
        the process were operating at Top Secret it would pass the
        local access control check and the NFSv4.2 operation would
        proceed as in a normal NFSv4.2 environment.
      </t>

      <t>
        Note that in this scenario, all of the clients must be MAC
        functional. A single client which does
        not do local access control checks would violate the 
        model.
      </t>
    </section>

    <section anchor='ss:examples:pes' title='MAC functional Server'>
      <t>
        With a MAC functional server and a client which is not, the
        client behaves as if it were in a normal NFSv4.2 environment.
        Since the process on the client does not provide a security
        attribute the server must define a mechanism for labeling all
        requests from a client.  Assume that the server is using the
        same criteria used in the first example.  The server sees
        the request as coming from a subnet that is a Secret network.
        The server determines that all clients on that subnet will
        have their requests labeled with Secret.  Since the directory
        on the server is labeled Top Secret and Secret does not
        dominate Top Secret the server would fail the request with
        NFS4ERR_ACCESS.
      </t>
    </section>
  </section>
</section>

<section anchor="sec:security" title="Security Considerations">
  <t>
    When either the client or server is operating in guest mode it is important to
    realize that one side is not enforcing MAC protections. Alternate methods are
    being used to handle the lack of MAC support and care should be taken to
    identify and mitigate threats from possible tampering outside of these methods.
  </t>
</section>
