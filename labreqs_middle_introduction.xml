<!-- Copyright (C) The IETF Trust (2012) -->
<!-- Copyright (C) The Internet Society (2012) -->

<section anchor="sec:intro" title="Introduction">
  <t>
    Mandatory Access Control (MAC) systems have been mainstreamed in
    modern operating systems such as Linux (R), FreeBSD (R), and Solaris
    (TM).  MAC systems bind security attributes to
    subjects (processes) and objects within a system.  These attributes
    are used with other information in the system to make access control
    decisions.
  </t>

  <t>
    Access control models such as Unix permissions or Access Control
    Lists are commonly referred to as Discretionary Access Control (DAC)
    models.  These systems base their access decisions on user identity
    and resource ownership.  In contrast MAC models base their access
    control decisions on the label on the subject (usually a process) and
    the object it wishes to access.  These labels may contain user
    identity information but usually contain additional information.  In
    DAC systems users are free to specify the access rules for resources
    that they own.  MAC models base their security decisions on a system
    wide policy established by an administrator or organization which the
    users do not have the ability to override.  DAC systems offer no real
    protection against malicious or flawed software due to each program
    running with the full permissions of the user executing it.
    Inversely MAC models can confine malicious or flawed software and
    usually act at a finer granularity than their DAC counterparts.
  </t>

  <t>
    People desire to use NFSv4 with these systems.  A mechanism is
    required to provide security attribute information to NFSv4 clients
    and servers.  This mechanism has the following requirements:
  </t>

  <t>
    <list style='format (%d)'>
      <t>
        Clients must be able to convey to the server the security
        attribute of the subject making the access request.  The server
        may provide a mechanism to enforce MAC policy based on the
        requesting subject's security attribute.
      </t>

      <t>
        Server must be able to store and retrieve the security attribute
        of exported files as requested by the client.
      </t>

      <t>
        Server must provide a mechanism for notifying clients of attribute
        changes of files on the server.
      </t>

      <t>
        Clients and Servers must be able to negotiate Label Formats 
        and provide a mechanism to translate between them as needed.
      </t>
    </list>
  </t>
</section>

<section anchor='sec:defs' title='Definitions'>
  <t>
    <list style='hanging'>
      <t hangText='Label Format Specifier (LFS):'>
        is an identifier used by the client to establish
        the syntactic format of the security label and the semantic meaning
        of its components.  These specifiers exist in a registry associated
        with documents describing the format and semantics of the label.
      </t>

      <t hangText='Label Format Registry:'>
        is the IANA registry containing all registered
        LFS along with references to the documents that
        describe the syntactic format and semantics of the security label.
      </t>

      <t hangText='Policy Identifier (PI):'>
        is an optional part of the definition of a Label
        Format Specifier which allows for clients and server to identify
        specific security policies.
      </t>

      <t hangText='Object:'>
        is a passive resource within the system that we
        wish to be protected.  Objects can be entities such as files,
        directories, pipes, sockets, and many other system resources relevant
        to the protection of the system state.
      </t>

      <t hangText='Subject:'>
        A subject is an active entity usually a process which is
        requesting access to an object.
      </t>
  
      <t hangText='Multi-Level Security (MLS):'>
        is a traditional model where objects are given a sensitivity
        level (Unclassified, Secret, Top Secret,  etc) and a category set
        <xref target='ref:rh_mls' />.
      </t>
    </list>
  </t>
</section>
