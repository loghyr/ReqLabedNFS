<!-- Copyright (C) The IETF Trust (2012-2013) -->
<!-- Copyright (C) The Internet Society (2012-2013) -->

<section anchor='req' title='Requirements'>

  <t>
    The following initial requirements have been gathered from users,
    developers, and from previous development efforts in this area such as
    DTOS <xref target='DTOS' /> and NSA's experimental NFSv3 enhancements
    <xref target='SENFSV3' />.
  </t>

  <section anchor='req:general' title='General'>
    <t>
      A mechanism is
      required to provide security attribute information to NFSv4 clients
      and servers.  This mechanism has the following requirements:
    </t>

    <t>
      <list style='format (%d)'>
        <t>
          Clients MUST be able to convey to the server the security
          attribute of the subject making the access request.  The server
          may provide a mechanism to enforce MAC policy based on the
          requesting subject's security attribute.
        </t>

        <t>
          Servers MUST be able to store and retrieve the security attribute
          of exported files as requested by the client.
        </t>

        <t>
          Servers MUST provide a mechanism for notifying clients of attribute
          changes of files on the server.
        </t>

        <t>
          Clients and Servers MUST be able to negotiate Label Formats
          and provide a mechanism to translate between them as needed.
        </t>
      </list>
    </t>
  </section>

  <section anchor='req:secserv' title='Security Services'>
    <t>
      Labeled NFS SHOULD support that the following security services are provided for
      all NFSv4.2 messaging. These services may be provided by lower layers even if NFS
      has to be aware of and leverage them:

<?rfc subcompact="yes" ?>
      <list style="symbols">
        <t>Authentication</t>
        <t>Integrity</t>
        <t>Privacy</t>
      </list>
<?rfc subcompact="no" ?>
    </t>

    <t>
      Mechanisms and algorithms used in the provision of security services
      MUST be configurable, so that appropriate levels of protection may be flexibly
      specified per mandatory security policy.
    </t>

    <t>
      Strong mutual authentication will be required between the server and
      the client for Full Mode operation <xref target='modes:full' />.
    </t>

    <t>
      MAC security labels and any related security state SHOULD always be
      protected by these security services when transferred over the network;
      as SHOULD the binding of labels and state to associated objects and
      subjects.
    </t>

    <t>
      Labeled NFS SHOULD support authentication on a context granularity so
      that different contexts running on a client can use different
      cryptographic keys and facilities.
    </t>
  </section>

  <section anchor='req:encdoi' title='Label Encoding, Label Format Specifiers, and Label Checking Authorities'>
    <t>
      Encoding of MAC labels and attributes passed over the network MUST
      be specified in a complete and unambiguous manner while maintaining the
      flexibility of MAC implementations. To accomplish this the labels
      MUST consist of an opaque component bound with a Label Format Specifier (LFS).
      The LFS component provides a mechanism for identifying the structure and semantics of the
      opaque component.  Meanwhile, the opaque component is the security label which will
      be interpreted by the MAC models.
    </t>

    <t>
      MAC models base access decisions on security attributes bound to
      subjects and objects. With a given MAC model, all systems have
      semantically coherent labeling - a security label MUST always
      mean exactly the same thing on every system. While this may not be
      necessary for simple MAC models it is recommended that most label formats
      assigned an LFS incorporate this concept into their label format.
    </t>

    <t>
      Labeled NFS SHOULD define an initial negotiation scheme
      with the primary aims of simplicity and completeness.  This is to
      facilitate practical deployment of systems without being
      weighed down by complex and over-generalized global schemes.  Future
      extensibility SHOULD also be taken into consideration.
    </t>

    <t>
      Labeled NFS MUST provide a means for servers and clients to identify their
      LFS for the purposes of authorization, security service selection, and
      security label interpretation.
    </t>

    <t>
      Labeled NFS MUST provide a means for servers and clients to identify their
      mode of operation (see <xref target='modes' />).
    </t>

    <t>
      A negotiation scheme SHOULD be provided, allowing systems from
      different label formats to agree on how they will interpret or
      translate each others foreign labels.  Multiple concurrent agreements may be
      current between a server and a client.
    </t>

    <t>
      All security labels and related security state transferred across the
      network MUST be tagged with a valid LFS.
    </t>

    <t>
      If the LFS supported on a system changes, the system SHOULD renegotiate agreements to
      reflect these changes.
    </t>

    <t>
      If a system receives any security label or security state tagged with an
      LFS it does not recognize or cannot interpret, it MUST reject that label
      or state.
    </t>

    <t>
      NFSv4.2 includes features which may cause a client to cross an LFS 
      boundary when accessing what appears to be a single file system.  If LFS
      negotiation is supported by the client and the server, the server SHOULD
      negotiate a new, concurrent agreement with the client, acting on behalf of
      the externally located source of the files.
    </t>
  </section>

  <section anchor='req:labeling' title='Labeling'>
    <t>
      Implementations MUST validate security labels supplied over the network to
      ensure that they are within a set of labels permitted from a specific peer,
      and if not, reject them.  Note that a system may permit a different set of
      labels to be accepted from each peer.
    </t>

    <section anchor='req:labeling:client' title='Client Labeling'>
      <t>
        At the client, labeling semantics for NFS mounted file systems MUST remain
        consistent with those for locally mounted file systems.  In particular,
        user-level labeling operations local to the client MUST be enacted locally via
        existing APIs, to ensure compatibility and consistency for applications and
        libraries.
      </t>
      <t>
        Note that this does not imply any specific mechanism for conveying labels over
        the network.
      </t>
      <t>
        When an object is newly created by the client, it will calculate the label for
        the object based on its policy. Once that is done it will send the
        request to the server which has the ability to deny the creation of the object
        with that label based on the server's policy. In creating the file the server
        MUST ensure that the label is bound to the object before the object becomes
        visible to the rest of the system.  This ensures that any access control or
        further labeling decisions are correct for the object.
      </t>
    </section>

    <section anchor='req:labeling:server' title='Server Labeling'>
      <t>
        The server MUST provide the capability for clients to retrieve security labels
        on all exported file system objects where possible.  This includes cases where
        only in-core and/or read-only security labels are available at the server for
        any of its exported file systems.
      </t>

      <t>
        The server MUST honor the ability for a client to specify the label of an
        object on creation.  If the server is MAC enabled it may choose to reject the
        label specified by the client due to restrictions in the server policy.
        The server SHOULD NOT attempt to find a suitable label for an object in event
        of different labeling rules on its end.  The server is allowed to translate
        the label but SHOULD NOT change the semantic meaning of the label.
      </t>
    </section>
  </section>

  <section anchor='req:enforce' title='Policy Enforcement'>
    <t>
      The MAC-Functional client determines if a process request is sent to
      the remote server. Upon a successful response from the server, it must
      use its own policies on the object's security labels to determine
      if the process can be given access. The client SHOULD NOT need to
      be cognizant if the server is either a Limited Server or fully
      MAC-Functional.
    </t>

    <section anchor='req:enforce:client' title='Client Enforcement'>
      <t>
        The client MUST apply its own policy to remotely located objects, using
        security labels for the objects obtained from the server.  It MUST be
        possible to configure the maximum length of time a client may cache
        state regarding remote labels before re-validating that state with the
        server.
      </t>

      <t>
        If the server's policy changes, the client MUST flush all object state
        back to the server.  The server MUST ensure that any flushed state
        received is consistent with current policy before committing it
        to stable storage.
      </t>

      <t>
        Any local security state associated with cached or delegated objects
        MUST also be flushed back to the server when any other state of the
        objects is required to be flushed back.
      </t>

      <t>
        The implication here is that if the client holds
        a delegation on an object, then it enforces policy to local changes
        based on the object label it got from the server. When it tries
        to commit those changes to the server, it SHOULD be prepared for the
        server to reject those changes based on the policies of the server.
      </t>
    </section>

    <section anchor='req:enforce:server' title='Server Enforcement'>
      <t>
        A MAC-Functional server MUST enforce its security policy over all exported
        objects, for operations which originate both locally and remotely.
      </t>

      <t>
        Requests from authenticated clients MUST be processed using security
        labels and credentials supplied by the client as if they originated
        locally.
      </t>

      <t>
        As with labeling, the system MUST also take into account any other
        volatile client security state, such as a change in process security
        context via dynamic transition.  Access decisions SHOULD also be made
        based upon the current client security label accessing the object,
        rather than the security label which opened it, if different.
      </t>

      <t>
        The server SHOULD recall delegation of an object if the object's security
        label changes.
      </t>
    </section>
  </section>

  <section anchor='req:namespace' title='Namespace Access'>
    <t>
      The server SHOULD provide a means to authorize selective access to the
      exported file system namespace based upon client credentials and
      according to security policy.
    </t>

    <t>
      This is a common requirement of MLS-enabled systems, which often need
      to present selective views of namespaces based upon the clearances of
      the subjects.
    </t>
  </section>

  <section anchor='req:upgrade' title='Upgrading Existing Server'>
    <t>
      Note that under the MAC model, all objects MUST have labels.
      Therefore, if an existing server is upgraded to include Labeled NFS support,
      then it is the responsibility of the security system to
      define the behavior for existing objects.
    </t>
  </section>
</section>

